import { existsSync, mkdirSync, readdirSync, writeFileSync } from "mz/fs";
import { resolve, relative } from "path";
import { MintlistFileUtil } from "../util/mintlist-file-util";

export function genIndex(opts: any) {
  if (!isOpts(opts)) {
    throw new Error("Invalid options");
  }
  const { outDir, inDir } = opts;
  const inPath = resolve(inDir);
  const outPath = resolve(outDir);
  const files = getFilePaths(inPath);
  if (files.length === 0) {
    throw new Error(`No files found in ${inPath}`);
  }

  const contents = [
    HEADER_LINE,
    "",
    ...files.map((file) => toImportLine(file, outPath)),
    "",
    ...files.map((file) => toExportLine(file)),
    "",
  ].join("\n");

  if (!existsSync(outPath)) {
    mkdirSync(outPath);
  }

  writeFileSync(`${outPath}/index.ts`, contents);
}

function toExportLine(path: string): string {
  const fileName = path.split("/").pop();
  if (!fileName) {
    throw new Error("Invalid path");
  }
  return `export const ${toExportIdentifier(fileName)}: ${
    isMintlistName(fileName) ? "Mintlist" : "Tokenlist"
  } = ${toImportIdentifier(fileName)};`;
}

function toExportIdentifier(name: string): string {
  const parts = name.split(".");
  const prefix = parts[0].replace("-", "_").toUpperCase();
  return `${prefix}_${parts[1].toUpperCase()}`;
}

function toImportLine(path: string, outPath: string): string {
  const fileName = path.split("/").pop();
  if (!fileName) {
    throw new Error("Invalid path");
  }
  return `import ${toImportIdentifier(fileName)} from "./${relative(outPath, path)}";`;
}

function toImportIdentifier(name: string): string {
  const parts = toUpperCamelCase(name).split(".");
  return parts[0].split("-").concat(parts[1]).join("");
}

function toUpperCamelCase(str: string) {
  return str.replace(/(\w)(\w*)/g, function (_, g1, g2) {
    return g1.toUpperCase() + g2.toLowerCase();
  });
}

function getFilePaths(dir: string): string[] {
  const dirents = readdirSync(dir, { withFileTypes: true });
  const files = [];
  for (const dirent of dirents) {
    if (dirent.isDirectory()) {
      files.push(...getFilePaths(resolve(dir, dirent.name)));
      continue;
    }
    if (
      MintlistFileUtil.validMintlistName(dirent.name) ||
      MintlistFileUtil.validTokenlistName(dirent.name)
    ) {
      files.push(resolve(dir, dirent.name));
    }
  }
  return files;
}

function isMintlistName(name: string): boolean {
  return name.endsWith(".mintlist.json");
}

const HEADER_LINE = `// This file is automatically generated. Do not edit it directly.

import { Mintlist, Tokenlist } from "@orca-so/token-sdk";`;

interface Opts {
  outDir: string;
  inDir: string;
}

function isOpts(opts: any): opts is Opts {
  return !!opts && typeof opts === "object" && "outDir" in opts && "inDir" in opts;
}
